[{"C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\index.js":"1","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\App.js":"3","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\MultiStepHandler.js":"4","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\SiteInflowOutflow\\TestTest.js":"5","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\SiteInflowOutflow\\DrawContainer.js":"6","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\SiteInflowOutflow\\SiteDrawingLayout.js":"7","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\Login\\login.component.js":"8","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\SiteSelection\\SiteSelectionMap.js":"9","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\SiteSelection\\SiteSelectionForm.js":"10","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\Disclaimer\\disclaimer.component.js":"11","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\HazardAllocation\\Layout.js":"12","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\PDFDownloadPage\\pdf.js":"13","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\FileUploadFinal\\Imageloader.js":"14","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\HazardSelect\\HazardPage.js":"15","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\SiteInflowOutflow\\Board.js":"16","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\SiteInflowOutflow\\ToolBar.js":"17","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\SiteInflowOutflow\\Canvas.js":"18","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\SiteSelection\\SiteSelection.js":"19","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\HazardAllocation\\Canvas.js":"20","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\HazardSelect\\HazardList.js":"21","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\HazardSelect\\HazardListSelected.js":"22","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\HazardSelect\\Hazard.js":"23","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\HazardSelect\\HazardSelected.js":"24","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\GuideDownload\\GuideDownload.js":"25"},{"size":505,"mtime":1612835392603,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":840,"mtime":1612908614735,"results":"29","hashOfConfig":"27"},{"size":7571,"mtime":1612915265133,"results":"30","hashOfConfig":"27"},{"size":205,"mtime":1612906082093,"results":"31","hashOfConfig":"27"},{"size":1546,"mtime":1612906082089,"results":"32","hashOfConfig":"27"},{"size":1463,"mtime":1612908614759,"results":"33","hashOfConfig":"27"},{"size":3277,"mtime":1612920883262,"results":"34","hashOfConfig":"27"},{"size":557,"mtime":1612835392591,"results":"35","hashOfConfig":"27"},{"size":2360,"mtime":1612835392591,"results":"36","hashOfConfig":"27"},{"size":2035,"mtime":1612920977743,"results":"37","hashOfConfig":"27"},{"size":2443,"mtime":1612908614739,"results":"38","hashOfConfig":"27"},{"size":1155,"mtime":1612835392555,"results":"39","hashOfConfig":"27"},{"size":2915,"mtime":1612910372207,"results":"40","hashOfConfig":"27"},{"size":5509,"mtime":1612910372210,"results":"41","hashOfConfig":"27"},{"size":10481,"mtime":1612906082089,"results":"42","hashOfConfig":"27"},{"size":376,"mtime":1612835392583,"results":"43","hashOfConfig":"27"},{"size":1667,"mtime":1612908614755,"results":"44","hashOfConfig":"27"},{"size":3689,"mtime":1612835392587,"results":"45","hashOfConfig":"27"},{"size":24995,"mtime":1612906081985,"results":"46","hashOfConfig":"27"},{"size":340,"mtime":1612835392539,"results":"47","hashOfConfig":"27"},{"size":400,"mtime":1612910372209,"results":"48","hashOfConfig":"27"},{"size":354,"mtime":1612906081993,"results":"49","hashOfConfig":"27"},{"size":377,"mtime":1612906082025,"results":"50","hashOfConfig":"27"},{"size":1646,"mtime":1612920526119,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"b61fyv",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"54"},"C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\index.js",[],["114","115"],"C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\App.js",["116","117","118"],"import React from 'react';\r\nimport './App.css';\r\nimport logo from './logo.png';\r\nimport MultiStepHandler from './MultiStepHandler';\r\nimport {BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\n\r\n// App.css holds a basic grid-template layout which is a 2x3 grid, like the following:\r\n// ' header header '\r\n// ' main main '\r\n// ' footer footer'\r\nexport default function App () {\r\n\r\n  return (  <Router>\r\n\r\n <body>\r\n <div className=\"header\">\r\n   <h1 style={{color:'white', fontWeight: \"bold\", marginLeft: \"40px\", marginTop: \"20px\", marginBottom: '10px'}}>Site Mate</h1>\r\n   <div style={{color:'white', marginLeft: \"40px\"}}>Hoki ora mai Come home safely</div>\r\n </div>\r\n <div className=\"main\"><MultiStepHandler/></div> \r\n <div className=\"footer\"></div>\r\n </body>\r\n <Switch>\r\n\r\n          </Switch>\r\n\r\n </Router>\r\n  );\r\n}\r\n\r\n","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\MultiStepHandler.js",["119","120","121","122"],"import { createGenerateClassName } from '@material-ui/core';\r\nimport React, { Component } from 'react';\r\nimport Login from './Login/login.component';\r\nimport SiteSelectionForm from './SiteSelection/SiteSelectionForm';\r\nimport SiteSelectionMap from './SiteSelection/SiteSelectionMap';\r\nimport SiteUpload from './FileUploadFinal/Imageloader';\r\nimport Disclaimer from './Disclaimer/disclaimer.component';\r\nimport GuideDownload from './GuideDownload/GuideDownload';\r\nimport HazardPage from './HazardSelect/HazardPage';\r\nimport HazardDrop from './HazardAllocation/Layout';\r\nimport Logo from './logo.png';\r\nimport './App.css';\r\nimport './FileUploadFinal/Imageloader.css';\r\nimport SiteDrawingLayout from './SiteInflowOutflow/SiteDrawingLayout';\r\nimport PDF from './PDFDownloadPage/pdf';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DrawContainer from './SiteInflowOutflow/DrawContainer';\r\nimport TestTest from './SiteInflowOutflow/TestTest';\r\n\r\n\r\nexport class MultiStepHandler extends Component {\r\n    // Put some empty fields in here to hold data when it needs to be changed e.g. industry: ''. will need to do this for anything we want in the final 'pdf' \r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            step: 1,\r\n            checkBox: false,\r\n            email: '',\r\n            industry: '',\r\n            siteaddress: '',\r\n            sqmSite: '',\r\n            warehouse: '',\r\n            imageState: '',\r\n            selectedHaz: [],\r\n            disclaimer: false,\r\n            siteImageUplodaded: false,\r\n            hazardDropCompleted: false,\r\n            logo: Logo,\r\n            uploadImg: null,\r\n            uploadedImage: null,\r\n            img: null,\r\n            dndImg: null\r\n        }\r\n    }\r\n    //put step value forward once, for submit buttons\r\n    nextStep = () => {\r\n        const { step } = this.state;\r\n        this.setState({\r\n            step: step + 1\r\n        })\r\n    }\r\n    //put step value back once, for previous page buttons\r\n    prevStep = () => {\r\n        const { step } = this.state;\r\n        this.setState({\r\n            step: step - 1\r\n        })\r\n    }\r\n    handleChange = input => e => {\r\n        this.setState({ [input]: e.target.value })\r\n    }\r\n    setImg = (passedImg) => {\r\n        this.setState({\r\n            img: passedImg\r\n        })\r\n    }\r\n    setDndImg = (passedImg) => {\r\n        this.setState({\r\n            dndImg: passedImg\r\n        })\r\n    }\r\n\r\n    setUploadedImage = (image) => {\r\n        this.setState({\r\n            uploadedImage: image\r\n        })\r\n    }\r\n    render() {\r\n\r\n        const { step } = this.state;\r\n        const { email, industry, siteaddress, sqmSiteSize, warehouse, disclaimer, siteImageUplodaded, hazardSelect, hazardDropCompleted, selectedHaz } = this.state;\r\n        const values = { email, industry, siteaddress, sqmSiteSize, warehouse, disclaimer, siteImageUplodaded, hazardSelect, hazardDropCompleted, selectedHaz }\r\n        // Switch case for displaying each page, pass in current state of step as parameter to choose current case\r\n        switch (step) {\r\n            \r\n            //Login page\r\n            case 1:\r\n                return (\r\n                    <Login\r\n                        nextStep={this.nextStep}\r\n                        handleChange={this.handleChange}\r\n                        values={values}\r\n \r\n                    />\r\n                )\r\n            case 2:\r\n                return (\r\n                    <Disclaimer\r\n                        nextStep={this.nextStep}\r\n                        prevStep={this.prevStep}\r\n                        handleChange={this.handleChange}\r\n                        values={values}\r\n \r\n                    />\r\n                )\r\n\r\n                case 3:\r\n                    return (\r\n                        <GuideDownload\r\n                            nextStep={this.nextStep}\r\n                            prevStep={this.prevStep}\r\n                            handleChange={this.handleChange}\r\n                            values={values}\r\n     \r\n                        />\r\n                    )\r\n \r\n\r\n\r\n            // //Site Selection \r\n \r\n            case 4:\r\n \r\n                return (\r\n                    <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                    <SiteSelectionForm\r\n                        nextStep={this.nextStep}\r\n                        prevStep={this.prevStep}\r\n                        handleChange={this.handleChange}\r\n                        values={values}\r\n                        \r\n                    />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                    <SiteSelectionMap\r\n                      nextStep={this.nextStep}\r\n                      prevStep={this.prevStep}\r\n                      handleChange={this.handleChange}\r\n                      values={values}   \r\n                    />       \r\n                    </Grid>\r\n                    </Grid>\r\n                )\r\n            // e.g. hazard select. import the component that is needed and then return that component below.\r\n            case 5:\r\n                return (\r\n                    <SiteUpload\r\n                        nextStep={this.nextStep}\r\n                        prevStep={this.prevStep}\r\n                        handleChange={this.handleChange}\r\n                        values={values}\r\n                        setUploadedImage={this.setUploadedImage}\r\n                    />\r\n                )\r\n                case 6:\r\n                    return (\r\n                        <HazardPage\r\n                            nextStep={this.nextStep}\r\n                            prevStep={this.prevStep}\r\n                            handleChange={this.handleChange}\r\n                            values={values}\r\n                            uploadedImage={this.state.uploadedImage}\r\n                        />\r\n                    )\r\n                //Hazard Drop\r\n                case 7:\r\n                    return (\r\n                        <HazardDrop\r\n                            nextStep={this.nextStep}\r\n                            prevStep={this.prevStep}\r\n                            handleChange={this.handleChange}\r\n                            values={values}\r\n                            showHaz={this.hazardList}\r\n                            setDndImg={this.setDndImg}\r\n                        // data={{ showHaz: this.state.selectedHaz }}\r\n                        />\r\n                    )\r\n                case 8:\r\n                    return (\r\n     \r\n                        <DrawContainer\r\n                            nextStep={this.nextStep}\r\n                            prevStep={this.prevStep}\r\n                            handleChange={this.handleChange}\r\n                            values={values}\r\n                            setImg={this.setImg}\r\n                        />\r\n                    )     \r\n                case 9:\r\n                    return (\r\n                        <PDF\r\n                            values={values}\r\n                            handleChange={this.handleChange}\r\n                            prevStep={this.prevStep}\r\n                            email={this.state.email}\r\n                            industry={this.state.industry}\r\n                            siteaddress={this.state.siteaddress}\r\n                            sqmSite={this.state.sqmSite}\r\n                            warehouse={this.state.warehouse}\r\n                        />\r\n                    )\r\n            }\r\n     \r\n        }\r\n    }\r\n    export default MultiStepHandler","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\SiteInflowOutflow\\TestTest.js",[],"C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\SiteInflowOutflow\\DrawContainer.js",[],"C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\SiteInflowOutflow\\SiteDrawingLayout.js",["123","124"],"\r\nimport React, { useRef, useEffect, useState } from 'react'\r\nimport Canvas from './Canvas';\r\nimport ToolBar from './ToolBar'\r\n\r\n\r\nfunction SiteDrawingLayout(props) {\r\n\r\n    const [colour, setColour] = useState(\"red\");\r\n    const [size, setSize] = useState(5);\r\n\r\n    //'Continue' event handler, calls the nextStep method from MultiStepHandler to go forward a page\r\n    const continuee = e => {\r\n        e.preventDefault();\r\n        props.nextStep();\r\n    }\r\n    //'back' event handler, calls the prevStep method from MultiStepHandler to go back a page\r\n    const back = e => {\r\n        e.preventDefault();\r\n        props.prevStep();\r\n    }\r\n\r\n    function toggleColour() {\r\n        if (colour === \"red\") {\r\n            setColour(\"green\")\r\n        } else {\r\n            setColour(\"red\")\r\n        }\r\n    }\r\n\r\n    function increase() {\r\n        setSize(prev => prev + 1)\r\n    }\r\n\r\n    function decrease() {\r\n        if (size === 1) {\r\n            return\r\n        }\r\n        setSize(prev => prev - 1)\r\n    }\r\n\r\n    return (\r\n        <div className=\"site-draw-container\">\r\n            <Canvas colour={colour} size={size} />\r\n            <ToolBar toggleColour={toggleColour} decrease={decrease} increase={increase} />\r\n\r\n            <input className='buttonStyle' type='button' value=\"Back\" onClick={back} />\r\n            <input className='buttonStyle' type='button' value=\"Submit\" onClick={continuee} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SiteDrawingLayout;","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\Login\\login.component.js",["125","126","127","128","129","130","131","132"],"C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\SiteSelection\\SiteSelectionMap.js",["133","134","135"],"import React, { useState } from \"react\";\r\n/* global google */\r\nlet markerArray = [];\r\n\r\n   const SiteSelectionMap = () => {\r\n        return (\r\n          <div>   \r\n          <div>\r\n            <h2>Dont have a site plan? Save a screenshot of one on our satellite map! Press Windows Key(⊞) and Print screen (prt sc) to take the shot.</h2>\r\n        </div>\r\n        <iframe src=\"https://snazzymaps.com/embed/289197\" title = \"map\" width=\"100%\" height=\"600px\" allow=\"fullscreen\"></iframe> \r\n        </div>\r\n        );\r\n      }\r\nexport default SiteSelectionMap;\r\n","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\SiteSelection\\SiteSelectionForm.js",["136"],"import React, { Component } from \"react\";\r\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\r\n/* global google */\r\n \r\nexport class SiteSelectionForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.autocompleteInput = React.createRef();\r\n    this.autocomplete = null;\r\n  }\r\n \r\n  \r\n  //'Continue' event handler, calls the nextStep method from MultiStepHandler to go forward a page\r\n  continue = e => {\r\n    e.preventDefault();\r\n    this.props.nextStep();\r\n}\r\n//'back' event handler, calls the prevStep method from MultiStepHandler to go back a page\r\n  back = e => {\r\n    e.preventDefault();\r\n    this.props.prevStep();\r\n  }\r\n  handleChange = input => e => {\r\n    this.setState({[input]: e.target.value})\r\n}\r\n \r\n  componentDidMount() {\r\n    this.autocomplete = new google.maps.places.Autocomplete(this.autocompleteInput.current,\r\n        {\"types\": [\"geocode\"]});\r\n \r\n    this.autocomplete.addListener('place_changed', this.handlePlaceChanged);\r\n  }\r\n \r\n \r\n    render() {\r\n        return (\r\n            <form>\r\n \r\n            <h3>Fill Out Your Site Details Here.</h3>\r\n \r\n            <div className=\"form-group\">\r\n                <label>Enter Industry</label>\r\n                <input type=\"text\" className=\"form-control\" placeholder=\"Enter Industry\" />\r\n            </div>\r\n \r\n            <div className=\"form-group\">\r\n              <label>Enter Site Address</label>\r\n            <input ref={this.autocompleteInput} className=\"form-control\" id=\"autocomplete\" placeholder=\"Enter your Address\"\r\n         type=\"text\"></input>\r\n            </div>\r\n \r\n            <div className=\"form-group\">\r\n                <label>Enter Square Meters</label>\r\n                <input type=\"text\" className=\"form-control\" placeholder=\"Enter Sqm\" />\r\n            </div>\r\n \r\n            <div className=\"form-group\">\r\n                <label>Enter Warehouse</label>\r\n                <input type=\"text\" className=\"form-control\" placeholder=\"Enter Warehouse\" />\r\n            </div>\r\n            <input type='button'className= 'buttonStyle'  value=\"Back\" onClick={this.back} />\r\n              <input type='button'className= 'buttonStyle' value=\"Continue\" onClick={this.continue} />\r\n            </form>\r\n        \r\n          \r\n        );\r\n    }\r\n}\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyBojPgUo6oL-v-WuwF62T2AGR-KrxVQgvE'\r\n})(SiteSelectionForm);","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\Disclaimer\\disclaimer.component.js",["137","138","139","140","141"],"C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\HazardAllocation\\Layout.js",["142","143"],"import React from 'react';\r\nimport Canvas from \"./Canvas\";\r\nimport \"./Layout.css\"\r\n\r\n\r\nexport default class Layout extends React.Component {\r\n    //'Continue' event handler, calls the nextStep method from MultiStepHandler to go forward a page\r\n    continue = e => {\r\n        e.preventDefault();\r\n        this.props.nextStep();\r\n    }\r\n    //'back' event handler, calls the prevStep method from MultiStepHandler to go back a page\r\n    back = e => {\r\n        e.preventDefault();\r\n        this.props.prevStep();\r\n    }\r\n    handleChange = input => e => {\r\n        this.setState({ [input]: e.target.value })\r\n    }\r\n    render() {\r\n        const { values, handleChange } = this.props;\r\n        return (\r\n            <>\r\n                <div id=\"fragment\">\r\n\r\n                    {/* <Canvas /> */}\r\n\r\n                    <div id=\"canvas\">\r\n                        <Canvas />\r\n                        {/* <input type='button' value=\"Selected Hazards\" onClick={() => console.log(this.props.data.showHaz)}/> */}\r\n                    </div>\r\n\r\n                    <div id=\"sidebar\">\r\n                        {/* <Hazards /> */}\r\n\r\n                        <div style={{fontWeight: 'bold', fontSize: '30px', textAlign: 'left', margin: '8px', color: 'white'}}> Key</div>\r\n                        <div id=\"flex-item\">\r\n                            <span className=\"text\">Forklift</span>\r\n                        </div>\r\n                        <div id=\"flex-item\">\r\n                             <span className=\"text\">Truck</span>\r\n                        </div>\r\n                        <div id=\"flex-item\">\r\n                            <span className=\"text\">Cone</span>\r\n                        </div>\r\n                        <div id=\"flex-item\">\r\n                            <span className=\"text\">Robot Arm</span>\r\n                        </div>\r\n                        <div id=\"flex-item\">\r\n                            <span className=\"text\">Chemical Barrel</span>\r\n                        </div>\r\n\r\n                        <input style={{marginTop:\"50px\", float: 'left'}} type='button' className='buttonStyle' value=\"Save and Continue\" onClick={this.continue} />\r\n\r\n                    </div>\r\n\r\n                    {/* <div > */}\r\n                        {/* <input type='button' className='buttonStyle' value=\"Back\" onClick={this.back} /> */}\r\n                    {/* </div> */}\r\n                </div>\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\PDFDownloadPage\\pdf.js",[],"C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\FileUploadFinal\\Imageloader.js",[],"C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\HazardSelect\\HazardPage.js",["144"],"import '../App.css';\r\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport HazardList from './HazardList';\r\nimport HazardListSelected from \"./HazardListSelected\";\r\nimport { useState } from 'react';\r\n\r\nfunction HazardPage(props) {\r\n\r\n    const [hazards, setHazards] = useState([\r\n        {\r\n            id: 1,\r\n            name: \"Forklift\",\r\n            description: \"...\",\r\n            selected: false,\r\n            img: \"./Forklift.png\",\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Chemical Hazard\",\r\n            description: \"...\",\r\n            selected: false,\r\n            img: \"./Barrel.png\",\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Truck\",\r\n            description: \"...\",\r\n            selected: false,\r\n            img: \"./Truck.png\",\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Machinery\",\r\n            description: \"...\",\r\n            selected: false,\r\n            img: \"./Machinery.png\",\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Personell\",\r\n            description: \"...\",\r\n            selected: false,\r\n            img: \"./Person.png\",\r\n        }\r\n        //,\r\n        // {\r\n        //     id:4,\r\n        //     text: 'Traffic Cone',\r\n        //     name: 'Traffic Cone',\r\n        //     image: <img style={{height: '20px', width: '20px'}}src=\"https://tinyurl.com/y6a5xw69\" alt=\"\"></img>,\r\n        // },\r\n        // {\r\n        //     id:5,\r\n        //     text: 'Pedestrian Zone',\r\n        //     name: 'Pedestrian Zone',\r\n        //     image: <img style={{height: '40px', width: '40px'}} img src= 'https://tinyurl.com/y27hc3ut' alt=\"\"></img>\r\n            \r\n        // }\r\n    ])\r\n\r\n    const [selHaz, setSelHaz] = useState([]);\r\n\r\n    const clickHazard = (id) => {\r\n        console.log('Clicked!', id);\r\n        const haz = hazards;\r\n        \r\n        setHazards(hazards.filter(hazard => hazard.id !== id))\r\n        setSelHaz(prev => prev.concat(haz.filter(hazard => hazard.id === id)))\r\n        \r\n    }\r\n\r\n    const clickHazardSelected = (id) => {\r\n        console.log('Clicked!', id);\r\n        const haz = hazards;\r\n        \r\n        setHazards(prev => prev.concat(selHaz.filter(hazard => hazard.id === id)))\r\n        setSelHaz(prev => prev.filter((hazard => hazard.id !== id)))\r\n    }\r\n\r\n    //'Continue' event handler, calls the nextStep method from MultiStepHandler to go forward a page\r\n  const continuee = e => {\r\n    e.preventDefault();\r\n    props.nextStep();\r\n}\r\n//'back' event handler, calls the prevStep method from MultiStepHandler to go back a page\r\n  const back = e => {\r\n    e.preventDefault();\r\n    props.prevStep();\r\n  }\r\n\r\n  //const { values, handleChange } = props;\r\n\r\n  return (\r\n    <div>\r\n        <img src={props.uploadedImage} alt=\"\"></img>\r\n      <div className=\"hazard-page-container\">\r\n          \r\n          {/* <div>\r\n            <DropdownButton id=\"dropdown-basic-button\" title=\"Select Hazard\">\r\n                {hazards.map((hazard) => (<Dropdown.Item key={hazard.id}>{hazard.name}</Dropdown.Item>))}\r\n            </DropdownButton>\r\n        </div> */}\r\n        <div>\r\n            \r\n            <h1 className=\"pageTitle\">Tukuake Nga Korero</h1>\r\n            <h1 className=\"pageTitle\">Upload your site information</h1>\r\n            <div className=\"dropdown-buttons\">\r\n            <DropdownButton id=\"dropdown-basic-button-mobileplant\" title=\"Mobile Plant\">\r\n                <Dropdown.Item href=\"#/action-1\"><img className=\"dropdown-icon\" alt=\"\" src=\"./Truck.png\"></img>Truck</Dropdown.Item>\r\n                <Dropdown.Item href=\"#/action-1\"><img className=\"dropdown-icon\" alt=\"\" src=\"./Forklift.png\"></img>Forklift</Dropdown.Item>\r\n            </DropdownButton>\r\n            <DropdownButton id=\"dropdown-basic-button-equipment\" title=\"Equipment\">\r\n                <Dropdown.Item href=\"#/action-1\"><img className=\"dropdown-icon\" alt=\"\" src=\"./Machinery.png\"></img>Machine Arm</Dropdown.Item>\r\n\r\n            </DropdownButton>\r\n            <DropdownButton id=\"dropdown-basic-button-personell\" title=\"Personell\">\r\n                <Dropdown.Item href=\"#/action-1\"><img className=\"dropdown-icon\" alt=\"\" src=\"./Person.png\"></img>Visitor</Dropdown.Item>\r\n            </DropdownButton>\r\n            <DropdownButton id=\"dropdown-basic-button-chemical\" title=\"Chemical Hazards\">\r\n                \r\n                <Dropdown.Item href=\"#/action-1\"><img className=\"dropdown-icon\" alt=\"\" src=\"./Barrel.png\"></img>Industrial Chemicals</Dropdown.Item>\r\n                \r\n            </DropdownButton>\r\n            <DropdownButton id=\"dropdown-basic-button-other\" title=\"Other\">\r\n                <Dropdown.Item href=\"#/action-1\">Other</Dropdown.Item>\r\n            </DropdownButton>\r\n            </div>\r\n\r\n            <HazardList hazards={hazards} clickHazard={clickHazard}/>\r\n        </div>\r\n\r\n        <div>\r\n            <h2 className=\"pageSubtitle\">Your selections:</h2>\r\n            <p className=\"hazHelpText\">Click \"?\" to learn more about a selected item</p>\r\n            <HazardListSelected hazards={selHaz} clickHazardSelected={clickHazardSelected} />\r\n        </div>\r\n                \r\n    </div>\r\n\r\n    \r\n    <input type='button' className= 'buttonStyle' value=\"Back\" onClick={back}/>\r\n    <input type='button' className= 'buttonStyle' value=\"Save & Continue\" onClick={continuee}/>\r\n    {/* <input type='button' value=\"Selected Hazards\" onClick={() => props.showHaz(selHaz)}/> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HazardPage;\r\n","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\SiteInflowOutflow\\Board.js",["145"],"import React from 'react';\r\nimport '../App.css'\r\n//import './style.css'\r\nimport mapImage from './map.PNG'\r\n\r\nconsole.log(\"hi there\");\r\n\r\nclass Board extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isToggleOn: false,\r\n            isRedOn: false,\r\n            isOrangeOn: false,\r\n            isGreenOn: false,\r\n            isYellowOn: false,\r\n            points: [],\r\n            pathsry: [],\r\n            save: false,\r\n            img: null,\r\n            image2: null\r\n\r\n        }\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.setRed = this.setRed.bind(this);\r\n        this.setOrange = this.setOrange.bind(this);\r\n        this.setGreen = this.setGreen.bind(this);\r\n        this.setYellow = this.setYellow.bind(this);\r\n        this.clearCanvas = this.clearCanvas.bind(this);\r\n        this.save = this.save.bind(this);\r\n        this.load = this.load.bind(this);\r\n        //this.setState = this.setState.bind(this);\r\n\r\n        \r\n    }\r\n\r\n    pathsry = [];\r\n    \r\n    \r\n\r\n    componentDidMount() {\r\n\r\n        var canvas = document.querySelector('#board');\r\n        var ctx = canvas.getContext('2d');\r\n        const pic = new Image();\r\n        pic.src = mapImage;\r\n        pic.onload = function() {\r\n            ctx.drawImage(pic, 0, 0)\r\n            \r\n        }\r\n        \r\n        this.drawOnCanvas();\r\n        \r\n        ctx.lineWidth = 20;\r\n        ctx.lineJoin = 'round';\r\n        ctx.lineCap = 'round';\r\n        console.log(\"HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\")\r\n        if (this.state.isToggleOn === true) {\r\n            ctx.strokeStyle = \"blue\";\r\n        } else if (this.state.isToggleOn === false) {\r\n            ctx.strokeStyle = \"orange\";\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    handleClick() {\r\n        this.setState(prevState => ({\r\n          isToggleOn: !prevState.isToggleOn\r\n        }));\r\n      }\r\n\r\n    drawOnCanvas() {\r\n        \r\n        var canvas = document.querySelector('#board');\r\n        var ctx = canvas.getContext('2d');\r\n        var sketch = document.querySelector('#sketch');\r\n        var sketch_style = getComputedStyle(sketch);\r\n\r\n\r\n        //canvas.width = parseInt(sketch_style.getPropertyValue('width'));\r\n        //canvas.height = parseInt(sketch_style.getPropertyValue('height'));\r\n\r\n        // i dont trust this code below very much \r\n\r\n        const pic = new Image();\r\n        pic.src = mapImage;\r\n        pic.onload = function() {\r\n            canvas.width = pic.width;\r\n            canvas.height = pic.height;\r\n            ctx.drawImage(pic, 0, 0)\r\n            ctx.lineWidth = 5;\r\n            ctx.lineJoin = 'round';\r\n            ctx.lineCap = 'round';\r\n        \r\n        \r\n        }\r\n\r\n        // ^^^\r\n\r\n        \r\n        let points = [];\r\n\r\n        var mouse = {x: 0, y: 0};\r\n        var last_mouse = {x: 0, y: 0};\r\n\r\n        /* Mouse Capturing Work */\r\n        canvas.addEventListener('mousemove', function(e) {\r\n            last_mouse.x = mouse.x;\r\n            last_mouse.y = mouse.y;\r\n\r\n            // mouse.x = e.pageX - this.offsetLeft;\r\n            // mouse.y = e.pageY - this.offsetTop;\r\n            mouse.x = e.layerX;\r\n            mouse.y = e.layerY;\r\n            // points.push({x:mouse.x, y:mouse.y})\r\n        }, false);\r\n\r\n\r\n        /* Drawing on Paint App */\r\n        //ctx.globalAlpha = 0.7;\r\n        ctx.lineWidth = 20;\r\n        ctx.lineJoin = 'round';\r\n        ctx.lineCap = 'round';\r\n        console.log(\"HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\")\r\n        if (this.state.isToggleOn === true) {\r\n            ctx.strokeStyle = \"blue\";\r\n        } else if (this.state.isToggleOn === false) {\r\n            ctx.strokeStyle = \"orange\";\r\n        }\r\n        \r\n\r\n        canvas.addEventListener('mousedown', function(e) {\r\n            canvas.addEventListener('mousemove', onPaint, false);\r\n        }, false);\r\n\r\n        canvas.addEventListener('mouseup', function() {\r\n            canvas.removeEventListener('mousemove', onPaint, false);\r\n                \r\n        }, false);\r\n\r\n        var onPaint = function() {\r\n            ctx.beginPath();\r\n            ctx.moveTo(last_mouse.x, last_mouse.y);\r\n            ctx.lineTo(mouse.x, mouse.y);\r\n            ctx.closePath();\r\n            ctx.stroke();\r\n            points.push(mouse.x, mouse.y);\r\n        };\r\n\r\n        this.setState(prevState => ({\r\n            pathsry: prevState.pathsry.push(points)\r\n            \r\n        }))\r\n        \r\n        \r\n\r\n        \r\n    }\r\n\r\n    setRed() {\r\n        this.setState(prevState => ({\r\n            isRedOn: true,\r\n            isOrangeOn: false,\r\n            isGreenOn: false,\r\n            isYellowOn: false,\r\n            helpMessage: \"HELP MESSAGE FOR: outflow outflow outflow\"\r\n          }));\r\n        var canvas = document.querySelector('#board');\r\n        var ctx = canvas.getContext('2d');\r\n        ctx.strokeStyle = \"red\";\r\n        ctx.lineWidth = 5;\r\n        ctx.lineJoin = 'round';\r\n        ctx.lineCap = 'round';\r\n        \r\n    }\r\n\r\n    setOrange() {\r\n        this.setState(prevState => ({\r\n            isRedOn: false,\r\n            isOrangeOn: true,\r\n            isGreenOn: false,\r\n            isYellowOn: false,\r\n            helpMessage: \"HELP MESSAGE FOR: pedestrian pedestrian pedestrian\"\r\n          }));\r\n        var canvas = document.querySelector('#board');\r\n        var ctx = canvas.getContext('2d');\r\n        ctx.strokeStyle = \"orange\";\r\n    }\r\n\r\n    setGreen() {\r\n        this.setState(prevState => ({\r\n            isRedOn: false,\r\n            isOrangeOn: false,\r\n            isGreenOn: true,\r\n            isYellowOn: false,\r\n            helpMessage: \"HELP MESSAGE FOR: inflow inflow inflow\"\r\n          }));\r\n        var canvas = document.querySelector('#board');\r\n        var ctx = canvas.getContext('2d');\r\n        ctx.strokeStyle = \"green\";\r\n    }\r\n\r\n    setYellow() {\r\n        this.setState(prevState => ({\r\n            isRedOn: false,\r\n            isOrangeOn: false,\r\n            isGreenOn: false,\r\n            isYellowOn: true,\r\n            helpMessage: \"HELP MESSAGE FOR: loading-zone loading-zone loading-zone\"\r\n          }));\r\n        var canvas = document.querySelector('#board');\r\n        var ctx = canvas.getContext('2d');\r\n        ctx.strokeStyle = \"yellow\";\r\n    }\r\n\r\n    clearCanvas() {\r\n        var canvas = document.querySelector('#board');\r\n        var ctx = canvas.getContext('2d');\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        const pic = new Image();\r\n        pic.src = mapImage;\r\n        pic.onload = function() {\r\n            ctx.drawImage(pic, 0, 0)\r\n        }\r\n    }\r\n\r\n    save() {\r\n        var canvas = document.querySelector('#board');\r\n        var ctx = canvas.getContext('2d');\r\n        \r\n        \r\n        //const imageData = canvas.toDataURL('image/png');\r\n        var save = canvas.toDataURL('image/png');\r\n        //var img = new Image(save);\r\n        console.log(save);\r\n        this.setState({\r\n            image: save\r\n          }, () => {\r\n\r\n              this.passbackImg(this.state.image)\r\n\r\n          });\r\n        \r\n        var pic2 = new Image()\r\n        pic2.src = save;\r\n        pic2.onload = function() {\r\n            ctx.drawImage(new Image(save), 0, 0);\r\n        }\r\n        \r\n    }\r\n\r\n    passbackImg(image) {\r\n        \r\n        this.props.setImg(image);\r\n    }\r\n\r\n\r\n    load(img) {\r\n\r\n        console.log(\"hi \" + img)\r\n        const pic = new Image();\r\n        pic.src = img;\r\n        var canvas = document.querySelector('#board');\r\n        var ctx = canvas.getContext('2d');\r\n        pic.onload = function() {\r\n            ctx.drawImage(pic, 0, 0);\r\n          }\r\n        \r\n    }\r\n\r\n\r\n    \r\n\r\n    \r\n\r\n    render() {\r\n\r\n        let stylee = {\r\n            \r\n            background: 'rgba(233, 180, 100, 1)',\r\n            borderRadius: '10px',\r\n            margin: '10px'\r\n        }\r\n        let styleFocus = {\r\n            \r\n            background: '#EDC78D',\r\n            \r\n            borderRadius: '10px',\r\n            margin: '10px'\r\n        }\r\n        \r\n        \r\n\r\n        return (\r\n            <div id=\"sketch\" className=\"sketch\">\r\n                {/* <img src={this.props.passedImage} alt=\"\" id=\"passedImage\"></img> */}\r\n                <p className=\"helpMessage\">{this.state.helpMessage}</p>\r\n                <div className=\"buttonContainer\">\r\n                    <button className=\"drawButtons\" onClick={this.setGreen} style = {this.state.isGreenOn ? styleFocus : stylee}>\r\n                    Inflow\r\n                    <div class = 'box green'></div>\r\n                    </button>\r\n                    <button className=\"drawButtons\" onClick={this.setRed} style = {this.state.isRedOn ? styleFocus : stylee}>\r\n                    Outflow\r\n                    <div class = 'box red'></div>\r\n                    </button>\r\n                    <button className=\"drawButtons\" onClick={this.setYellow} style = {this.state.isYellowOn ? styleFocus : stylee}>\r\n                    Loading Zone\r\n                    <div class = 'box yellow'></div>\r\n                    </button>\r\n                    <button className=\"drawButtons\" onClick={this.setOrange} style = {this.state.isOrangeOn ? styleFocus : stylee}>\r\n                    Pedestrian Area\r\n                    <div class = 'box orange'></div>\r\n                    </button>\r\n                    <div className=\"gap\" style = {{minHeight:'50px'}}></div>\r\n                    <button className=\"drawButtons\" onClick={this.clearCanvas} style = {stylee}>\r\n                    Clear Screen\r\n                    </button>\r\n                    {/* onClick={() => { func1(); func2();}} */}{/*()=>this.passbackImg(this.state.image) */}\r\n                    {/* onClick={this.save}*/}\r\n                    <button className=\"drawButtons\" onClick={this.save} style = {stylee}>\r\n                    Save\r\n                    </button>\r\n                    {/* <button className=\"drawButtons\" onClick={() => this.passbackImg(this.state.image)} style = {stylee}>\r\n                    Save2\r\n                    </button> */}\r\n                    {/* <button className=\"drawButtons\" onClick={() => this.load(this.state.image)} style = {stylee}>\r\n                    Load\r\n                    \r\n                    </button> */}\r\n                    </div>\r\n                <canvas className=\"board\" id=\"board\"></canvas>\r\n                {/*this.state.save ? <h1>saved</h1> : <h1>notsaved</h1>*/}\r\n            </div>\r\n            //() => clickHazard(hazard.id)\r\n        )\r\n    }\r\n}\r\nexport default Board;","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\SiteInflowOutflow\\ToolBar.js",[],"C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\SiteInflowOutflow\\Canvas.js",[],"C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\SiteSelection\\SiteSelection.js",["146","147","148","149","150","151","152"],"import React, {Component}from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SiteSelectionForm from '../SiteSelection/SiteSelectionForm';\r\nimport SiteSelectionMap from '../SiteSelection/SiteSelectionMap';\r\nimport {Link } from 'react-router-dom';\r\nimport MultiStepHandler from '../MultiStepHandler';\r\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\r\n/* global google */\r\nlet markerArray = [];\r\n\r\n    \r\n const style = {\r\n    maxWidth: \"600px\",\r\n    height: \"400px\",\r\n    overflowX: \"hidden\",\r\n    overflowY: \"hidden\"\r\n   };\r\n   const containerStyle = {\r\n    maxWidth: \"600px\",\r\n    height: \"400px\"\r\n   };\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n//Main SiteSelection class, which inserts sub-components; SiteSelectionForm and SiteSelectionMap\r\nexport class SiteSelection extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.autocompleteInput = React.createRef();\r\n    this.autocomplete = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.autocomplete = new google.maps.places.Autocomplete(this.autocompleteInput.current,\r\n        {\"types\": [\"geocode\"]});\r\n\r\n    this.autocomplete.addListener('place_changed', this.handlePlaceChanged);\r\n  }\r\n\r\n  \r\n  //'Continue' event handler, calls the nextStep method from MultiStepHandler to go forward a page\r\n  continue = e => {\r\n    e.preventDefault();\r\n    this.props.nextStep();\r\n}\r\n//'back' event handler, calls the prevStep method from MultiStepHandler to go back a page\r\n  back = e => {\r\n    e.preventDefault();\r\n    this.props.prevStep();\r\n  }\r\n  handleChange = input => e => {\r\n    this.setState({[input]: e.target.value})\r\n}\r\n\r\n        render() {\r\n          const { values, handleChange } = this.props;\r\n        return ( \r\n        <div>\r\n           <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <h1>Select Site | Pae Whiriwhiri</h1>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <form>\r\n<h4>Site Details | Taipitopito Pae</h4>\r\n\r\n<div className=\"form-group\">\r\n    <input type=\"text\" className=\"form-control\" style={{color:'black'}} onChange={handleChange('industry')} defaultValue={values.industry} placeholder=\"Enter Industry\" />\r\n</div>\r\n\r\n<div className=\"form-group\">\r\n<input ref={this.autocompleteInput} className=\"form-control\" style={{color:'black'}}  id=\"autocomplete\" onChange={handleChange('siteaddress')} defaultValue={values.siteaddress} placeholder=\"Enter your Address\"\r\ntype=\"text\"></input>\r\n</div>\r\n\r\n<div className=\"form-group\">\r\n    <input type=\"text\" className=\"form-control\" style={{color:'black'}}  placeholder=\"Enter Sqm\" />\r\n</div>\r\n\r\n<div className=\"form-group\">\r\n    <input type=\"text\" className=\"form-control\"  style={{color:'black'}}  placeholder=\"Enter Warehouse\" />\r\n</div>\r\n\r\n</form>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n        <div>\r\n            <Map\r\n        google={this.props.google}\r\n        style={style}\r\n        containerStyle={containerStyle}\r\n        initialCenter={\r\n          {\r\n            lat: -41.313489,\r\n            lng: 175.193434\r\n          }\r\n        }\r\n      />\r\n      </div>\r\n        </Grid>\r\n        <input className= 'buttonStyle' type='button' value=\"Back\" onClick={this.back}/>\r\n        <input className= 'buttonStyle'type='button' value=\"Submit\" onClick={this.continue}/>\r\n      </Grid>\r\n      </div>\r\n       );\r\n    \r\n}} export default GoogleApiWrapper({\r\n    apiKey: 'AIzaSyBojPgUo6oL-v-WuwF62T2AGR-KrxVQgvE'\r\n  })(SiteSelection);\r\n","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\HazardAllocation\\Canvas.js",["153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169"],"import React, { Component, createRef, useCallback, useState, useRef, useEffect } from \"react\";\r\nimport { Stage, Layer, Rect, Text, Ellipse, Image, Transformer } from \"react-konva\";\r\nimport Konva from \"konva\";\r\nimport useImage from 'use-image';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nclass URLImage extends React.Component {\r\n  state = {\r\n    image: null\r\n  };\r\n  componentDidMount() {\r\n    this.loadImage();\r\n  }\r\n  componentDidUpdate(oldProps) {\r\n    if (oldProps.src !== this.props.src) {\r\n      this.loadImage();\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    this.image.removeEventListener('load', this.handleLoad);\r\n  }\r\n  loadImage() {\r\n    // save to \"this\" to remove \"load\" handler on unmount\r\n    this.image = new window.Image();\r\n    this.image.src = 'images/SitePlan.jpg';\r\n    this.image.addEventListener('load', this.handleLoad);\r\n  }\r\n  handleLoad = () => {\r\n    // after setState react-konva will update canvas and redraw the layer\r\n    // because \"image\" property is changed\r\n    this.setState({\r\n      image: this.image\r\n    });\r\n    // if you keep same image object during source updates\r\n    // you will have to update layer manually:\r\n    // this.imageNode.getLayer().batchDraw();\r\n  };\r\n  render() {\r\n    return (\r\n      <Image\r\n        x={this.props.x}\r\n        y={this.props.y}\r\n        width={this.props.width}\r\n        height={this.props.height}\r\n        image={this.state.image}\r\n        ref={node => {\r\n          this.imageNode = node;\r\n        }}\r\n        onClick={this.props.onClick}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst STANDARD_FORKLIFT_DRAG = (\r\n  e, idx, ImagePosition, setImagePosition,\r\n  userHazards, setUserHazards, draggableRef) => {\r\n\r\n  setImagePosition({\r\n    x: e.target._lastPos.x,\r\n    y: e.target._lastPos.y,\r\n  });\r\n\r\n  var imag = draggableRef.current;\r\n  imag.position({\r\n    x: e.target._lastPos.x,\r\n    y: e.target._lastPos.y,\r\n  });\r\n\r\n  let userHazardsUpdate = {\r\n    ...userHazards,\r\n    forklifts: userHazards.forklifts.map((eachImage, currentIdx) => {\r\n      if (currentIdx !== idx) {\r\n        return eachImage;\r\n      }\r\n      return {\r\n        x: e.target._lastPos.x,\r\n        y: e.target._lastPos.y,\r\n        width: 35,\r\n        height: 35,\r\n        idx: uuidv4()\r\n      }\r\n    })\r\n  }\r\n  setUserHazards(userHazardsUpdate);\r\n}\r\n\r\nconst TOOLBAR_FORKLIFT_DRAG = (\r\n  e, idx, imagePosition, setImagePosition,\r\n  userHazards, setUserHazards, draggableRef) => {\r\n\r\n  setImagePosition({\r\n    x: imagePosition.x,\r\n    y: imagePosition.y\r\n  });\r\n\r\n  var imag = draggableRef.current;\r\n  imag.position({\r\n    x: imagePosition.x,\r\n    y: imagePosition.y\r\n  });\r\n\r\n  let newImag = {\r\n    x: e.target._lastPos.x,\r\n    y: e.target._lastPos.y,\r\n    width: 35,\r\n    height: 35,\r\n    idx: uuidv4()\r\n  }\r\n\r\n  let userHazardsUpdate = {\r\n    ...userHazards,\r\n    forklifts: [...userHazards.forklifts, newImag]\r\n  }\r\n\r\n  setUserHazards(userHazardsUpdate);\r\n}\r\n\r\nconst STANDARD_TRUCK_DRAG = (\r\n  e, idx, ImagePosition, setImagePosition,\r\n  userHazards, setUserHazards, draggableRef) => {\r\n\r\n  setImagePosition({\r\n    x: e.target._lastPos.x,\r\n    y: e.target._lastPos.y,\r\n  });\r\n\r\n  var imag = draggableRef.current;\r\n  imag.position({\r\n    x: e.target._lastPos.x,\r\n    y: e.target._lastPos.y,\r\n  });\r\n\r\n  let userHazardsUpdate = {\r\n    ...userHazards,\r\n    trucks: userHazards.trucks.map((eachImage, currentIdx) => {\r\n      if (currentIdx !== idx) {\r\n        return eachImage;\r\n      }\r\n      return {\r\n        x: e.target._lastPos.x,\r\n        y: e.target._lastPos.y,\r\n        width: 35,\r\n        height: 35,\r\n        idx: uuidv4()\r\n      }\r\n    })\r\n  }\r\n  setUserHazards(userHazardsUpdate);\r\n}\r\n\r\nconst TOOLBAR_TRUCK_DRAG = (\r\n  e, idx, imagePosition, setImagePosition,\r\n  userHazards, setUserHazards, draggableRef) => {\r\n\r\n  setImagePosition({\r\n    x: imagePosition.x,\r\n    y: imagePosition.y\r\n  });\r\n\r\n  var imag = draggableRef.current;\r\n  imag.position({\r\n    x: imagePosition.x,\r\n    y: imagePosition.y\r\n  });\r\n\r\n  let newImag = {\r\n    x: e.target._lastPos.x,\r\n    y: e.target._lastPos.y,\r\n    width: 35,\r\n    height: 35,\r\n    idx: uuidv4()\r\n  }\r\n\r\n  let userHazardsUpdate = {\r\n    ...userHazards,\r\n    trucks: [...userHazards.trucks, newImag]\r\n  }\r\n\r\n  setUserHazards(userHazardsUpdate);\r\n}\r\n\r\n\r\n// const STANDARD_RECTANGLE_DELETE = (\r\n//   e, idx, eachRect, userHazards, setUserHazards) => {\r\n//   console.log('Delete idx: ', idx);\r\n\r\n//   // update the user hazards\r\n//   let userHazardsUpdate = {\r\n//     ...userHazards,\r\n\r\n//     // loop through all the rectangles\r\n//     rectangles: userHazards.rectangles.filter(rectangle => {\r\n//       // if the rectangle ID is not equal to the idx which was clicked, return\r\n//       return rectangle.idx !== idx;\r\n//     })\r\n//   }\r\n\r\n//   console.log('Pre-delete update: ', userHazardsUpdate)\r\n//   setUserHazards(userHazardsUpdate);\r\n// }\r\n\r\nconst STANDARD_CONE_DRAG = (\r\n  e, idx, ImagePosition, setImagePosition,\r\n  userHazards, setUserHazards, draggableRef) => {\r\n\r\n  setImagePosition({\r\n    x: e.target._lastPos.x,\r\n    y: e.target._lastPos.y,\r\n  });\r\n\r\n  var imag = draggableRef.current;\r\n  imag.position({\r\n    x: e.target._lastPos.x,\r\n    y: e.target._lastPos.y,\r\n  });\r\n\r\n  let userHazardsUpdate = {\r\n    ...userHazards,\r\n    cones: userHazards.cones.map((eachImage, currentIdx) => {\r\n      if (currentIdx !== idx) {\r\n        return eachImage;\r\n      }\r\n      return {\r\n        x: e.target._lastPos.x,\r\n        y: e.target._lastPos.y,\r\n        width: 35,\r\n        height: 35,\r\n        idx: uuidv4()\r\n      }\r\n    })\r\n  }\r\n\r\n  setUserHazards(userHazardsUpdate);\r\n}\r\n\r\nconst TOOLBAR_CONE_DRAG = (\r\n  e, idx, imagePosition, setImagePosition,\r\n  userHazards, setUserHazards, draggableRef) => {\r\n\r\n  setImagePosition({\r\n    x: imagePosition.x,\r\n    y: imagePosition.y\r\n  });\r\n\r\n  var imag = draggableRef.current;\r\n  imag.position({\r\n    x: imagePosition.x,\r\n    y: imagePosition.y\r\n  });\r\n\r\n  let newImag = {\r\n    x: e.target._lastPos.x,\r\n    y: e.target._lastPos.y,\r\n    width: 35,\r\n    height: 35,\r\n    idx: uuidv4()\r\n  }\r\n\r\n  let userHazardsUpdate = {\r\n    ...userHazards,\r\n    cones: [...userHazards.cones, newImag]\r\n  }\r\n\r\n  setUserHazards(userHazardsUpdate);\r\n}\r\n\r\nconst STANDARD_ROBOTARM_DRAG = (\r\n  e, idx, ImagePosition, setImagePosition,\r\n  userHazards, setUserHazards, draggableRef) => {\r\n\r\n  setImagePosition({\r\n    x: e.target._lastPos.x,\r\n    y: e.target._lastPos.y,\r\n  });\r\n\r\n  var imag = draggableRef.current;\r\n  imag.position({\r\n    x: e.target._lastPos.x,\r\n    y: e.target._lastPos.y,\r\n  });\r\n\r\n  let userHazardsUpdate = {\r\n    ...userHazards,\r\n    images: userHazards.robotarms.map((eachImage, currentIdx) => {\r\n      if (currentIdx !== idx) {\r\n        return eachImage;\r\n      }\r\n      return {\r\n        x: e.target._lastPos.x,\r\n        y: e.target._lastPos.y,\r\n        width: 35,\r\n        height: 35,\r\n        idx: uuidv4()\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nconst TOOLBAR_ROBOTARM_DRAG = (\r\n  e, idx, imagePosition, setImagePosition,\r\n  userHazards, setUserHazards, draggableRef) => {\r\n\r\n  setImagePosition({\r\n    x: imagePosition.x,\r\n    y: imagePosition.y\r\n  });\r\n\r\n  var imag = draggableRef.current;\r\n  imag.position({\r\n    x: imagePosition.x,\r\n    y: imagePosition.y\r\n  });\r\n\r\n  let newImag = {\r\n    x: e.target._lastPos.x,\r\n    y: e.target._lastPos.y,\r\n    width: 35,\r\n    height: 35,\r\n    idx: uuidv4()\r\n  }\r\n\r\n  let userHazardsUpdate = {\r\n    ...userHazards,\r\n    robotarms: [...userHazards.robotarms, newImag]\r\n  }\r\n\r\n  setUserHazards(userHazardsUpdate);\r\n}\r\n\r\nconst TOOLBAR_CHEMICALBARREL_DRAG = (\r\n  e, idx, imagePosition, setImagePosition,\r\n  userHazards, setUserHazards, draggableRef) => {\r\n\r\n  setImagePosition({\r\n    x: imagePosition.x,\r\n    y: imagePosition.y\r\n  });\r\n\r\n  var imag = draggableRef.current;\r\n  imag.position({\r\n    x: imagePosition.x,\r\n    y: imagePosition.y\r\n  });\r\n\r\n  let newImag = {\r\n    x: e.target._lastPos.x,\r\n    y: e.target._lastPos.y,\r\n    width: 35,\r\n    height: 35,\r\n    idx: uuidv4()\r\n  }\r\n\r\n  let userHazardsUpdate = {\r\n    ...userHazards,\r\n    chemicalBarrels: [...userHazards.chemicalBarrels, newImag]\r\n  }\r\n\r\n  setUserHazards(userHazardsUpdate);\r\n}\r\n\r\nconst STANDARD_CHEMICALBARREL_DRAG = (\r\n  e, idx, ImagePosition, setImagePosition,\r\n  userHazards, setUserHazards, draggableRef) => {\r\n\r\n  setImagePosition({\r\n    x: e.target._lastPos.x,\r\n    y: e.target._lastPos.y,\r\n  });\r\n\r\n  var imag = draggableRef.current;\r\n  imag.position({\r\n    x: e.target._lastPos.x,\r\n    y: e.target._lastPos.y,\r\n  });\r\n\r\n  let userHazardsUpdate = {\r\n    ...userHazards,\r\n    images: userHazards.chemicalBarrels.map((eachImage, currentIdx) => {\r\n      if (currentIdx !== idx) {\r\n        return eachImage;\r\n      }\r\n      return {\r\n        x: e.target._lastPos.x,\r\n        y: e.target._lastPos.y,\r\n        width: 35,\r\n        height: 35,\r\n        idx: uuidv4()\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n// const STANDARD_IMAGE_DELETE = (e, idx, eachImg, userHazards, setUserHazards) => {\r\n//   console.log(idx);\r\n\r\n//   let userHazardsUpdate = {\r\n//     ...userHazards,\r\n//     images: userHazards.images.filter(images => {\r\n//       return images.idx !== idx;\r\n//     })\r\n//   }\r\n//   setUserHazards(userHazardsUpdate);\r\n// }\r\n\r\n\r\n//creating a functional component here of the Draggable Rectangle\r\n\r\nconst DraggableReferenceForklift = (props) => {\r\n\r\n  const [img] = useImage('https://www.tinyurl.com/9kv7w4bn');\r\n\r\n  const [imagePosition, setImagePosition] = useState(props.initialPosition);\r\n  const draggableRef = useRef(null);\r\n  const transformRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (props.isSelected) {\r\n      // -------------------------------\r\n      transformRef.current.nodes([draggableRef.current]);\r\n      console.log(transformRef.current.getLayer());\r\n      transformRef.current.getLayer().batchDraw();\r\n    }\r\n\r\n  }, [props.isSelected]);\r\n\r\n\r\n  return (\r\n    <>\r\n      <Image\r\n        onClick={props.onSelect}\r\n        onTap={props.onSelect}\r\n        ref={draggableRef}\r\n        {...props.shapeProps}\r\n        image={img}\r\n        ref={draggableRef}\r\n        x={imagePosition.x}\r\n        y={imagePosition.y}\r\n        width={30}\r\n        height={30}\r\n        draggable\r\n        onDragEnd={(e) => { props.onDragEnd(e, props.idx, imagePosition, setImagePosition, props.userHazards, props.setUserHazards, draggableRef) }}\r\n      />\r\n      {props.isSelected && (\r\n        <Transformer\r\n          ref={transformRef}\r\n          boundBoxFunc={(oldBox, newBox) => {\r\n            // limit resize\r\n            if (newBox.width < 5 || newBox.height < 5) {\r\n              return oldBox;\r\n            }\r\n            return newBox;\r\n          }}\r\n        />\r\n      )\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nconst DraggableReferenceTruck = (props) => {\r\n\r\n  const [img] = useImage('https://www.tinyurl.com/xldyo2za ');\r\n\r\n  const [imagePosition, setImagePosition] = useState(props.initialPosition);\r\n  const draggableRef = useRef(null);\r\n  const transformRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (props.isSelected) {\r\n      // -------------------------------\r\n      transformRef.current.nodes([draggableRef.current]);\r\n      console.log(transformRef.current.getLayer());\r\n      transformRef.current.getLayer().batchDraw();\r\n    }\r\n\r\n  }, [props.isSelected]);\r\n\r\n\r\n  return (\r\n    <>\r\n      <Image\r\n        onClick={props.onSelect}\r\n        onTap={props.onSelect}\r\n        ref={draggableRef}\r\n        {...props.shapeProps}\r\n        image={img}\r\n        ref={draggableRef}\r\n        x={imagePosition.x}\r\n        y={imagePosition.y}\r\n        width={30}\r\n        height={35}\r\n        draggable\r\n        onDragEnd={(e) => { props.onDragEnd(e, props.idx, imagePosition, setImagePosition, props.userHazards, props.setUserHazards, draggableRef) }}\r\n      />\r\n      {props.isSelected && (\r\n        <Transformer\r\n          ref={transformRef}\r\n          boundBoxFunc={(oldBox, newBox) => {\r\n            // limit resize\r\n            if (newBox.width < 5 || newBox.height < 5) {\r\n              return oldBox;\r\n            }\r\n            return newBox;\r\n          }}\r\n        />\r\n      )\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nconst DraggableReferenceCone = (props) => {\r\n\r\n\r\n  const [img] = useImage('https://www.tinyurl.com/57vtztcm');\r\n\r\n  const [imagePosition, setImagePosition] = useState(props.initialPosition);\r\n  const draggableRef = useRef(null);\r\n  const transformRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (props.isSelected) {\r\n      // -------------------------------\r\n      transformRef.current.nodes([draggableRef.current]);\r\n      console.log(transformRef.current.getLayer());\r\n      transformRef.current.getLayer().batchDraw();\r\n    }\r\n\r\n  }, [props.isSelected]);\r\n\r\n\r\n  return (\r\n    <>\r\n      <Image\r\n        onClick={props.onSelect}\r\n        onTap={props.onSelect}\r\n        ref={draggableRef}\r\n        {...props.shapeProps}\r\n        image={img}\r\n        ref={draggableRef}\r\n        x={imagePosition.x}\r\n        y={imagePosition.y}\r\n        width={30}\r\n        height={35}\r\n        draggable\r\n        onDragEnd={(e) => { props.onDragEnd(e, props.idx, imagePosition, setImagePosition, props.userHazards, props.setUserHazards, draggableRef) }}\r\n      />\r\n      {props.isSelected && (\r\n        <Transformer\r\n          ref={transformRef}\r\n          boundBoxFunc={(oldBox, newBox) => {\r\n            // limit resize\r\n            if (newBox.width < 5 || newBox.height < 5) {\r\n              return oldBox;\r\n            }\r\n            return newBox;\r\n          }}\r\n        />\r\n      )\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nconst DraggableReferenceRobotArm = (props) => {\r\n\r\n\r\n  const [img] = useImage('https://www.tinyurl.com/3bw6m6ow');\r\n\r\n  const [imagePosition, setImagePosition] = useState(props.initialPosition);\r\n  const draggableRef = useRef(null);\r\n  const transformRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (props.isSelected) {\r\n      // -------------------------------\r\n      transformRef.current.nodes([draggableRef.current]);\r\n      console.log(transformRef.current.getLayer());\r\n      transformRef.current.getLayer().batchDraw();\r\n    }\r\n\r\n  }, [props.isSelected]);\r\n\r\n  return (\r\n    <>\r\n      <Image\r\n        onClick={props.onSelect}\r\n        onTap={props.onSelect}\r\n        ref={draggableRef}\r\n        {...props.shapeProps}\r\n        image={img}\r\n        ref={draggableRef}\r\n        x={imagePosition.x}\r\n        y={imagePosition.y}\r\n        width={30}\r\n        height={35}\r\n        draggable\r\n        onDragEnd={(e) => { props.onDragEnd(e, props.idx, imagePosition, setImagePosition, props.userHazards, props.setUserHazards, draggableRef) }}\r\n      />\r\n      {props.isSelected && (\r\n        <Transformer\r\n          ref={transformRef}\r\n          boundBoxFunc={(oldBox, newBox) => {\r\n            // limit resize\r\n            if (newBox.width < 5 || newBox.height < 5) {\r\n              return oldBox;\r\n            }\r\n            return newBox;\r\n          }}\r\n        />\r\n      )\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nconst DraggableReferenceChemicalBarrel = (props) => {\r\n\r\n  const [img] = useImage('https://www.tinyurl.com/1kcyzbvw ');\r\n\r\n  const [imagePosition, setImagePosition] = useState(props.initialPosition);\r\n  const draggableRef = useRef(null);\r\n  const transformRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (props.isSelected) {\r\n      // -------------------------------\r\n      transformRef.current.nodes([draggableRef.current]);\r\n      console.log(transformRef.current.getLayer());\r\n      transformRef.current.getLayer().batchDraw();\r\n    }\r\n\r\n  }, [props.isSelected]);\r\n\r\n  return (\r\n    <>\r\n      <Image\r\n        onClick={props.onSelect}\r\n        onTap={props.onSelect}\r\n        ref={draggableRef}\r\n        {...props.shapeProps}\r\n        image={img}\r\n        ref={draggableRef}\r\n        x={imagePosition.x}\r\n        y={imagePosition.y}\r\n        width={25}\r\n        height={40}\r\n        draggable\r\n        onDragEnd={(e) => { props.onDragEnd(e, props.idx, imagePosition, setImagePosition, props.userHazards, props.setUserHazards, draggableRef) }}\r\n      />\r\n      {props.isSelected && (\r\n        <Transformer\r\n          ref={transformRef}\r\n          boundBoxFunc={(oldBox, newBox) => {\r\n            // limit resize\r\n            if (newBox.width < 5 || newBox.height < 5) {\r\n              return oldBox;\r\n            }\r\n            return newBox;\r\n          }}\r\n        />\r\n      )\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst ToolBar = (props) => {\r\n  // ---------------------------------------//creating a functional component of the Draggable Toolbar\r\n  const [toolbarAttributes, setToolbarAttributes] = useState(null);\r\n\r\n  const toolbarRef = useCallback(node => {\r\n    if (node !== null) {\r\n      setToolbarAttributes(node.attrs);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Layer height={window.innerHeight} width={window.innerwidth}>\r\n      <Rect\r\n        ref={toolbarRef}\r\n        x={750}\r\n        y={65}\r\n        width={50}\r\n        height={50}\r\n        fill=\"white\"\r\n        cornerRadius={[10, 10, 10, 10]}\r\n      />\r\n\r\n<Rect\r\n        ref={toolbarRef}\r\n        x={750}\r\n        y={125}\r\n        width={50}\r\n        height={50}\r\n        fill=\"white\"\r\n        cornerRadius={[10, 10, 10, 10]}\r\n      />\r\n\r\n<Rect\r\n        ref={toolbarRef}\r\n        x={750}\r\n        y={185}\r\n        width={50}\r\n        height={50}\r\n        fill=\"white\"\r\n        cornerRadius={[10, 10, 10, 10]}\r\n      />\r\n\r\n<Rect\r\n        ref={toolbarRef}\r\n        x={750}\r\n        y={250}\r\n        width={50}\r\n        height={50}\r\n        fill=\"white\"\r\n        cornerRadius={[10, 10, 10, 10]}\r\n      />\r\n\r\n\r\n<Rect\r\n        ref={toolbarRef}\r\n        x={750}\r\n        y={310}\r\n        width={50}\r\n        height={50}\r\n        fill=\"white\"\r\n        cornerRadius={[10, 10, 10, 10]}\r\n      />\r\n\r\n\r\n      <DraggableReferenceForklift\r\n        draggable\r\n        key={`TOOLBAR_FORKLIFT`}\r\n        x={18}\r\n        y={window.innerHeight / 2 + 30}\r\n        width={35}\r\n        height={30}\r\n        setUserHazards={props.setUserHazards}\r\n        userHazards={props.userHazards}\r\n        onDragEnd={TOOLBAR_FORKLIFT_DRAG}\r\n        initialPosition={{ x: 760, y: 75}}\r\n      />\r\n\r\n      <DraggableReferenceTruck\r\n        draggable\r\n        key={`TOOLBAR_TRUCK`}\r\n        x={18}\r\n        y={window.innerHeight / 2 + 30}\r\n        width={35}\r\n        height={35}\r\n        setUserHazards={props.setUserHazards}\r\n        userHazards={props.userHazards}\r\n        onDragEnd={TOOLBAR_TRUCK_DRAG}\r\n        initialPosition={{ x: 760, y: 130 }}\r\n      />\r\n\r\n      <DraggableReferenceCone\r\n        draggable\r\n        key={`TOOLBAR_CONE`}\r\n        x={18}\r\n        y={window.innerHeight / 2 + 30}\r\n        width={35}\r\n        height={35}\r\n        setUserHazards={props.setUserHazards}\r\n        userHazards={props.userHazards}\r\n        onDragEnd={TOOLBAR_CONE_DRAG}\r\n        initialPosition={{ x: 760, y: 190 }}\r\n      />\r\n\r\n      <DraggableReferenceRobotArm\r\n        draggable\r\n        key={`TOOLBAR_ROBOTARM`}\r\n        x={18}\r\n        y={window.innerHeight / 2 + 30}\r\n        width={35}\r\n        height={35}\r\n        setUserHazards={props.setUserHazards}\r\n        userHazards={props.userHazards}\r\n        onDragEnd={TOOLBAR_ROBOTARM_DRAG}\r\n        initialPosition={{ x: 760, y: 255}}\r\n      />\r\n\r\n\r\n      <DraggableReferenceChemicalBarrel\r\n        draggable\r\n        key={`TOOLBAR_CHEMICALBARREL`}\r\n        x={18}\r\n        y={window.innerHeight / 2 + 30}\r\n        width={25}\r\n        height={40}\r\n        setUserHazards={props.setUserHazards}\r\n        userHazards={props.userHazards}\r\n        onDragEnd={TOOLBAR_CHEMICALBARREL_DRAG}\r\n        initialPosition={{ x: 762, y: 315}}\r\n      />\r\n\r\n    </Layer>\r\n  )\r\n}\r\n\r\nconst Canvas = () => {\r\n\r\n  const [userHazards, setUserHazards] = useState({\r\n    rectangles: [], ellipses: [], cones: [], robotarms: [], chemicalBarrels: [], trucks: [],\r\n    forklifts: [],\r\n  });\r\n  const [selectedId, selectShape] = useState(null);\r\n  const [cross] = useImage(\"https://i.dlpng.com/static/png/6502802_preview.png\");\r\n  const [crossPosition, setCrossPosition] = useState()\r\n\r\n  const siteRef = useRef();\r\n\r\n  const checkDeselect = (e) => {\r\n    // deselect when clicked on empty area\r\n    const clickedOnStage = e.target === e.target.getStage();\r\n    if (clickedOnStage) {\r\n      selectShape(null);\r\n      console.log(selectShape);\r\n    }\r\n  };\r\n\r\n  console.log(`SELECTED SHAPE: ${selectedId}`)\r\n\r\n  return (\r\n    //creates background stage (like canvas)\r\n    <Stage\r\n      width={850}\r\n      height={600}\r\n      onMouseDown={checkDeselect}\r\n      onTouchStart={checkDeselect}\r\n    >\r\n    <Layer>\r\n        <URLImage \r\n          x={0}\r\n          y={0}\r\n          width={700}\r\n          height={500}\r\n          onClick={(e) => {selectShape(null);}}\r\n        />\r\n      </Layer>\r\n\r\n      <Layer>\r\n\r\n        {userHazards.forklifts.map((eachImg, idx) => (\r\n          <DraggableReferenceForklift\r\n            key={`USER_IMG_${eachImg.idx}`}\r\n            idx={eachImg.idx}\r\n            setUserHazards={setUserHazards}\r\n            userHazards={userHazards}\r\n            onDragEnd={STANDARD_FORKLIFT_DRAG}\r\n            initialPosition={{ x: eachImg.x, y: eachImg.y }}\r\n            isSelected={eachImg.idx === selectedId}\r\n            onSelect={() => {\r\n              selectShape(eachImg.idx);\r\n            }}\r\n            onChange={(newAttrs) => {\r\n              const fork = userHazards.forklifts.slice();\r\n              fork[eachImg.idx] = newAttrs;\r\n              setUserHazards(fork);\r\n            }}\r\n          />\r\n        )\r\n        )}\r\n\r\n        {userHazards.trucks.map((eachImg, idx) => (\r\n          <>\r\n            <DraggableReferenceTruck\r\n              key={`USER_IMG_${eachImg.idx}`}\r\n              idx={eachImg.idx}\r\n              setUserHazards={setUserHazards}\r\n              userHazards={userHazards}\r\n              onDragEnd={STANDARD_TRUCK_DRAG}\r\n              initialPosition={{ x: eachImg.x, y: eachImg.y }}\r\n              isSelected={eachImg.idx === selectedId}\r\n              onSelect={() => {\r\n                selectShape(eachImg.idx);\r\n              }}\r\n              onChange={(newAttrs) => {\r\n                const truck = userHazards.trucks.slice();\r\n                truck[eachImg.idx] = newAttrs;\r\n                setUserHazards(truck);\r\n              }}\r\n            />\r\n\r\n            {/* <Image\r\n                  image={cross}\r\n                  idx={eachRect.idx}\r\n                  crossPosition={crossPosition}\r\n                  setCrossPosition={crossPosition}\r\n                  setUserHazards={setUserHazards}\r\n                  userHazards={userHazards}\r\n                  x={eachRect.x + 30}\r\n                  y={eachRect.y - 10}\r\n                  width={20}\r\n                  height={20}\r\n              /> */}\r\n          </>\r\n        )\r\n        )}\r\n\r\n        {userHazards.cones.map((eachImg, idx) => (\r\n          <DraggableReferenceCone\r\n            key={`USER_IMG_${eachImg.idx}`}\r\n            idx={eachImg.idx}\r\n            setUserHazards={setUserHazards}\r\n            userHazards={userHazards}\r\n            onDragEnd={STANDARD_CONE_DRAG}\r\n            initialPosition={{ x: eachImg.x, y: eachImg.y }}\r\n            isSelected={eachImg.idx === selectedId}\r\n            onSelect={() => {\r\n              selectShape(eachImg.idx);\r\n            }}\r\n            onChange={(newAttrs) => {\r\n              const cones = userHazards.cones.slice();\r\n              cones[eachImg.idx] = newAttrs;\r\n              setUserHazards(cones);\r\n            }}\r\n          />\r\n        )\r\n        )}\r\n\r\n        {userHazards.robotarms.map((eachImg, idx) => (\r\n          <DraggableReferenceRobotArm\r\n            key={`USER_IMG_${eachImg.idx}`}\r\n            idx={eachImg.idx}\r\n            setUserHazards={setUserHazards}\r\n            userHazards={userHazards}\r\n            onDragEnd={STANDARD_ROBOTARM_DRAG}\r\n            initialPosition={{ x: eachImg.x, y: eachImg.y }}\r\n            isSelected={eachImg.idx === selectedId}\r\n            onSelect={() => {\r\n              selectShape(eachImg.idx);\r\n            }}\r\n            onChange={(newAttrs) => {\r\n              const rb = userHazards.robotarms.slice();\r\n              rb[eachImg.idx] = newAttrs;\r\n              setUserHazards(rb);\r\n            }}\r\n          />\r\n        )\r\n        )}\r\n\r\n        {userHazards.chemicalBarrels.map((eachImg, idx) => (\r\n          <DraggableReferenceChemicalBarrel\r\n            key={`USER_IMG_${eachImg.idx}`}\r\n            idx={eachImg.idx}\r\n            setUserHazards={setUserHazards}\r\n            userHazards={userHazards}\r\n            onDragEnd={STANDARD_CHEMICALBARREL_DRAG}\r\n            initialPosition={{ x: eachImg.x, y: eachImg.y }}\r\n            isSelected={eachImg.idx === selectedId}\r\n            onSelect={() => {\r\n              selectShape(eachImg.idx);\r\n            }}\r\n            onChange={(newAttrs) => {\r\n              const cb = userHazards.chemicalBarrels.slice();\r\n              cb[eachImg.idx] = newAttrs;\r\n              setUserHazards(cb);\r\n            }}\r\n          />\r\n        )\r\n        )}\r\n\r\n      </Layer>\r\n      {/* Making toolbar draggable */}\r\n      <ToolBar\r\n        setUserHazards={setUserHazards}\r\n        userHazards={userHazards}\r\n      />\r\n\r\n    </Stage >\r\n  );\r\n}\r\n\r\n\r\nexport default Canvas;","C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\HazardSelect\\HazardList.js",[],"C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\HazardSelect\\HazardListSelected.js",[],"C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\HazardSelect\\Hazard.js",[],"C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\HazardSelect\\HazardSelected.js",[],"C:\\Users\\witherlaur1\\Documents\\WebVisualStudio\\sample\\frontend\\src\\Components\\GuideDownload\\GuideDownload.js",["170","171","172","173","174","175"],"\r\nimport React, { Component } from \"react\";\r\nimport '../App.css';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Logo from '../logo.png';\r\nimport Graphic from '../Discuss.png';\r\nimport Download from '../Download.JPG';\r\nimport Preview from '../Preview.png';\r\n\r\nexport default class GuideDownload extends Component {\r\n  continue = e => {\r\n    e.preventDefault();\r\n    this.props.nextStep();\r\n  }\r\n  //'back' event handler, calls the prevStep method from MultiStepHandler to go back a page\r\n  back = e => {\r\n    e.preventDefault();\r\n    this.props.prevStep();\r\n  }\r\n  render() {\r\n    const { values, handleChange } = this.props;\r\n    return (\r\n<div className=\"download-page-container\">\r\n    <div >\r\n            <img alt=\"discussGraphic\" className=\"discussGraphic\" style={{margin: '50px', width:'450px', height:'600px'}}src={Graphic} />\r\n    </div>\r\n\r\n      <div>\r\n        <h1 > Korero ki to Roopu | Time to Talk to the Team </h1>\r\n        <p className=\"disclaimerParagraph\">This downloadable guide has information about what a WTMP is and who needs one. It will help you gather the information you need about your site equipment, hazards and controls so you can make your own WTMP.</p>\r\n        <button className='buttonStyle' value=\"Download PDF Guide\"> Download PDF Guide</button>\r\n        <button className='buttonStyle' value=\"View PDF Guide\"> <img src={Preview} align=\"right|middle\"/> View PDF Guide </button>\r\n        <input className='buttonStyle' type='button' value=\"Back\" onClick={this.back} />\r\n        <input className='buttonStyle' type='button' value=\"Continue\" onClick={this.continue} />\r\n      </div>\r\n</div>  \r\n    );\r\n  }\r\n}\r\n",{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","severity":1,"message":"181","line":3,"column":8,"nodeType":"182","messageId":"183","endLine":3,"endColumn":12},{"ruleId":"180","severity":1,"message":"184","line":5,"column":42,"nodeType":"182","messageId":"183","endLine":5,"endColumn":47},{"ruleId":"180","severity":1,"message":"185","line":5,"column":49,"nodeType":"182","messageId":"183","endLine":5,"endColumn":53},{"ruleId":"180","severity":1,"message":"186","line":1,"column":10,"nodeType":"182","messageId":"183","endLine":1,"endColumn":33},{"ruleId":"180","severity":1,"message":"187","line":14,"column":8,"nodeType":"182","messageId":"183","endLine":14,"endColumn":25},{"ruleId":"180","severity":1,"message":"188","line":18,"column":8,"nodeType":"182","messageId":"183","endLine":18,"endColumn":16},{"ruleId":"189","severity":1,"message":"190","line":87,"column":9,"nodeType":"191","messageId":"192","endLine":206,"endColumn":14},{"ruleId":"180","severity":1,"message":"193","line":2,"column":17,"nodeType":"182","messageId":"183","endLine":2,"endColumn":23},{"ruleId":"180","severity":1,"message":"194","line":2,"column":25,"nodeType":"182","messageId":"183","endLine":2,"endColumn":34},{"ruleId":"180","severity":1,"message":"195","line":1,"column":10,"nodeType":"182","messageId":"183","endLine":1,"endColumn":24},{"ruleId":"180","severity":1,"message":"196","line":4,"column":8,"nodeType":"182","messageId":"183","endLine":4,"endColumn":16},{"ruleId":"180","severity":1,"message":"185","line":5,"column":10,"nodeType":"182","messageId":"183","endLine":5,"endColumn":14},{"ruleId":"180","severity":1,"message":"197","line":6,"column":8,"nodeType":"182","messageId":"183","endLine":6,"endColumn":21},{"ruleId":"180","severity":1,"message":"198","line":7,"column":10,"nodeType":"182","messageId":"183","endLine":7,"endColumn":16},{"ruleId":"180","severity":1,"message":"199","line":8,"column":8,"nodeType":"182","messageId":"183","endLine":8,"endColumn":12},{"ruleId":"180","severity":1,"message":"200","line":11,"column":10,"nodeType":"182","messageId":"183","endLine":11,"endColumn":18},{"ruleId":"201","severity":1,"message":"202","line":69,"column":40,"nodeType":"203","endLine":69,"endColumn":52},{"ruleId":"180","severity":1,"message":"204","line":1,"column":17,"nodeType":"182","messageId":"183","endLine":1,"endColumn":25},{"ruleId":"180","severity":1,"message":"205","line":2,"column":11,"nodeType":"206","messageId":"183","endLine":2,"endColumn":17},{"ruleId":"180","severity":1,"message":"207","line":3,"column":5,"nodeType":"182","messageId":"183","endLine":3,"endColumn":16},{"ruleId":"180","severity":1,"message":"208","line":2,"column":10,"nodeType":"182","messageId":"183","endLine":2,"endColumn":13},{"ruleId":"180","severity":1,"message":"185","line":4,"column":10,"nodeType":"182","messageId":"183","endLine":4,"endColumn":14},{"ruleId":"180","severity":1,"message":"209","line":5,"column":10,"nodeType":"182","messageId":"183","endLine":5,"endColumn":18},{"ruleId":"180","severity":1,"message":"210","line":19,"column":13,"nodeType":"182","messageId":"183","endLine":19,"endColumn":19},{"ruleId":"180","severity":1,"message":"211","line":19,"column":21,"nodeType":"182","messageId":"183","endLine":19,"endColumn":33},{"ruleId":"212","severity":1,"message":"213","line":22,"column":44,"nodeType":"203","endLine":22,"endColumn":118},{"ruleId":"180","severity":1,"message":"210","line":21,"column":17,"nodeType":"182","messageId":"183","endLine":21,"endColumn":23},{"ruleId":"180","severity":1,"message":"211","line":21,"column":25,"nodeType":"182","messageId":"183","endLine":21,"endColumn":37},{"ruleId":"180","severity":1,"message":"214","line":75,"column":15,"nodeType":"182","messageId":"183","endLine":75,"endColumn":18},{"ruleId":"180","severity":1,"message":"215","line":80,"column":13,"nodeType":"182","messageId":"183","endLine":80,"endColumn":25},{"ruleId":"180","severity":1,"message":"216","line":3,"column":8,"nodeType":"182","messageId":"183","endLine":3,"endColumn":13},{"ruleId":"180","severity":1,"message":"217","line":5,"column":8,"nodeType":"182","messageId":"183","endLine":5,"endColumn":25},{"ruleId":"180","severity":1,"message":"218","line":6,"column":8,"nodeType":"182","messageId":"183","endLine":6,"endColumn":24},{"ruleId":"180","severity":1,"message":"185","line":7,"column":9,"nodeType":"182","messageId":"183","endLine":7,"endColumn":13},{"ruleId":"180","severity":1,"message":"219","line":8,"column":8,"nodeType":"182","messageId":"183","endLine":8,"endColumn":24},{"ruleId":"180","severity":1,"message":"207","line":11,"column":5,"nodeType":"182","messageId":"183","endLine":11,"endColumn":16},{"ruleId":"180","severity":1,"message":"220","line":25,"column":7,"nodeType":"182","messageId":"183","endLine":25,"endColumn":16},{"ruleId":"180","severity":1,"message":"221","line":1,"column":17,"nodeType":"182","messageId":"183","endLine":1,"endColumn":26},{"ruleId":"180","severity":1,"message":"222","line":1,"column":28,"nodeType":"182","messageId":"183","endLine":1,"endColumn":37},{"ruleId":"180","severity":1,"message":"223","line":2,"column":30,"nodeType":"182","messageId":"183","endLine":2,"endColumn":34},{"ruleId":"180","severity":1,"message":"224","line":2,"column":36,"nodeType":"182","messageId":"183","endLine":2,"endColumn":43},{"ruleId":"180","severity":1,"message":"225","line":3,"column":8,"nodeType":"182","messageId":"183","endLine":3,"endColumn":13},{"ruleId":"180","severity":1,"message":"226","line":284,"column":7,"nodeType":"182","messageId":"183","endLine":284,"endColumn":24},{"ruleId":"180","severity":1,"message":"226","line":378,"column":7,"nodeType":"182","messageId":"183","endLine":378,"endColumn":24},{"ruleId":"227","severity":1,"message":"228","line":437,"column":9,"nodeType":"229","endLine":437,"endColumn":27},{"ruleId":"227","severity":1,"message":"228","line":489,"column":9,"nodeType":"229","endLine":489,"endColumn":27},{"ruleId":"227","severity":1,"message":"228","line":542,"column":9,"nodeType":"229","endLine":542,"endColumn":27},{"ruleId":"227","severity":1,"message":"228","line":594,"column":9,"nodeType":"229","endLine":594,"endColumn":27},{"ruleId":"227","severity":1,"message":"228","line":645,"column":9,"nodeType":"229","endLine":645,"endColumn":27},{"ruleId":"180","severity":1,"message":"230","line":673,"column":10,"nodeType":"182","messageId":"183","endLine":673,"endColumn":27},{"ruleId":"180","severity":1,"message":"231","line":812,"column":10,"nodeType":"182","messageId":"183","endLine":812,"endColumn":15},{"ruleId":"180","severity":1,"message":"232","line":813,"column":10,"nodeType":"182","messageId":"183","endLine":813,"endColumn":23},{"ruleId":"180","severity":1,"message":"233","line":813,"column":25,"nodeType":"182","messageId":"183","endLine":813,"endColumn":41},{"ruleId":"180","severity":1,"message":"234","line":815,"column":9,"nodeType":"182","messageId":"183","endLine":815,"endColumn":16},{"ruleId":"180","severity":1,"message":"235","line":4,"column":8,"nodeType":"182","messageId":"183","endLine":4,"endColumn":12},{"ruleId":"180","severity":1,"message":"199","line":5,"column":8,"nodeType":"182","messageId":"183","endLine":5,"endColumn":12},{"ruleId":"180","severity":1,"message":"236","line":7,"column":8,"nodeType":"182","messageId":"183","endLine":7,"endColumn":16},{"ruleId":"180","severity":1,"message":"210","line":21,"column":13,"nodeType":"182","messageId":"183","endLine":21,"endColumn":19},{"ruleId":"180","severity":1,"message":"211","line":21,"column":21,"nodeType":"182","messageId":"183","endLine":21,"endColumn":33},{"ruleId":"212","severity":1,"message":"213","line":32,"column":65,"nodeType":"203","endLine":32,"endColumn":106},"no-native-reassign",["237"],"no-negated-in-lhs",["238"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Link' is defined but never used.","'createGenerateClassName' is defined but never used.","'SiteDrawingLayout' is defined but never used.","'TestTest' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'useRef' is defined but never used.","'useEffect' is defined but never used.","'StylesProvider' is defined but never used.","'ReactDOM' is defined but never used.","'SiteSelection' is defined but never used.","'Button' is defined but never used.","'Logo' is defined but never used.","'FaDivide' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useState' is defined but never used.","'google' is defined but never used.","Program","'markerArray' is assigned a value but never used.","'Map' is defined but never used.","'Checkbox' is defined but never used.","'values' is assigned a value but never used.","'handleChange' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'haz' is assigned a value but never used.","'sketch_style' is assigned a value but never used.","'Paper' is defined but never used.","'SiteSelectionForm' is defined but never used.","'SiteSelectionMap' is defined but never used.","'MultiStepHandler' is defined but never used.","'useStyles' is assigned a value but never used.","'Component' is defined but never used.","'createRef' is defined but never used.","'Text' is defined but never used.","'Ellipse' is defined but never used.","'Konva' is defined but never used.","'userHazardsUpdate' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'toolbarAttributes' is assigned a value but never used.","'cross' is assigned a value but never used.","'crossPosition' is assigned a value but never used.","'setCrossPosition' is assigned a value but never used.","'siteRef' is assigned a value but never used.","'Grid' is defined but never used.","'Download' is defined but never used.","no-global-assign","no-unsafe-negation"]